promise是一个对象，提供的API可以进行一步操作
promise操作的三种状态：pending（进行中）、fulfilled（已成功）、rejected（失败）
1、优缺点
  优点：可以将异步操作以同步操作的流程表达出来
        避免了层层嵌套的回调函数
        统一API接口，使得异步操作更加容易
  缺点：promise一旦新建就会立即执行，中午无法取消
        如果不设置回调函数，promise内部抛出的错误不会反应到外部
        当处于pending状态时，无法得知目前进展到哪个阶段

2、基本用法
  1）创造一个promise实例
    const promise = new Promise(function(resolve, reject) {
      // ... some code
      if (/* 异步操作成功 */){
        resolve(value);   //从 pending(未完成) 变为 resolved(成功)
      } else {
        reject(error);    //从 pending(未完成) 变为 rejected(失败)
      }
    });
  2）then指定resolved状态和rejected状态的回调函数
    注意：then方法指定的回调函数，将在当前脚本所有同步任务执行完之后才会执行
    promise.then(function(value) {
      // success       (调用如上resolve状态时的回调函数)
    }, function(error) {
      // failure /可选      (调用如上rejected状态时的回调函数)
    });
  3）例子
    function timeout(ms) {
      return new Promise((resolve, reject) => {
        setTimeout(resolve, ms, 'done');
      });
    }
    timeout(100).then((value) => {
      console.log(value);
    });

3、promise方法
  1）then（） 为promise实例添加状态改变时的回调函数
    注意：then方法返回的是一个新的promise实例
  2）catch（） 用于指定发生错误时的回调函数
    注意：如果promise状态已经变成了resolved，再抛出错误时无效的
          如果没有使用catch方法指定错误处理的回调函数，promise对象抛出的错误不会传递到外层代码
  3）finally（）用于指定不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数
  4）all（）用于将多个 Promise 实例，包装成一个新的 Promise 实例
    注意：如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法
  5）用于将多个 Promise 实例，包装成一个新的 Promise 实例