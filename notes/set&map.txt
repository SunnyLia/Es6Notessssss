1、set
  用来生成set数据结构，类似于数组，值唯一，会去除重复数值
  const s = new Set();
  [2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));
  for (let i of s) {
    console.log(i);
  }
  // 2 3 5 4
  const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);
  items.size 
  // 5
  const set = new Set([1, 2, 3, 4, 4]);
  [...set]      //去除数组的重复成员
  // [1, 2, 3, 4]

  1）注意：两个对象总是不相等的
    let set = new Set();
    set.add({});
    set.size // 1
    set.add({});
    set.size // 2

  2）set属性和方法
    add(value) 添加某个值
    delete(value) 删除
    has(value) 是否为set的成员
    clear() 清空所有成员
    array.from() 将set结构转换为数组
      const items = new Set([1, 2, 3, 4, 5， 5]);
      const array = Array.from(items);
      //[1,2,3,4,5]

  3) set 遍历
    keys() 返回键名的遍历器
    values() 返回键值的遍历器
    entries() 返回键值对的遍历器
      let set = new Set(['red', 'green', 'blue']);
      for (let item of set.keys()) {
        console.log(item);
      }
      // red
      // green
      // blue

      for (let item of set.values()) {
        console.log(item);
      }
      // red                      
      // green
      // blue

      for (let item of set.entries()) {
        console.log(item);
      }
      // ["red", "red"]
      // ["green", "green"]
      // ["blue", "blue"]

    for...of循环遍历set可以替换value()方法
      for (let x of set) {
        console.log(x);
      }
      // red
      // green
      // blue

    forEach() 遍历
      set = new Set([1, 4, 9]);
      set.forEach((value, key) => console.log(key + ' : ' + value))
      // 1 : 1
      // 4 : 4
      // 9 : 9



2、map
  会生成map数据结构，类似于对象，是键值对的集合
  const map = new Map([
    ['name', '张三'],
    ['title', 'Author']
  ]);
  map.size // 2
  map.get('name') // "张三"

  1）方法
    b.set(a,'张三') //将对象o当做b的一个键 
    get(a) //获取这个键
    has()
    delete()

  2）注意
    只有对同一个对象的引用，map结构才能将其视为同一个键
    const map = new Map();
    map.set(['a'], 555);
    map.get(['a']) // undefined

    map.set(-0, 555);
    map.get(+0) // 555

  3）遍历
    keys() 遍历健名
    value() 遍历键值
    entries() 遍历所有成员
      const map = new Map([
        ['F', 'no'],
        ['T',  'yes'],
      ]);
      for (let item of map.entries()) {
        console.log(item[0], item[1]);
      }
      // "F" "no"
      // "T" "yes"
    forEach()

  4)将map结构转为数组结构，使用扩展运算符（...）
    const map = new Map([
      [1, 'one'],
      [2, 'two'],
      [3, 'three'],
    ]);
    [...map.keys()]
    // [1, 2, 3]
    [...map.values()]
    // ['one', 'two', 'three']
    [...map.entries()]
    // [[1,'one'], [2, 'two'], [3, 'three']]
    [...map]
    // [[1,'one'], [2, 'two'], [3, 'three']]
  5)数组转化为map类型
    将数组传入 Map 构造函数，就可以转为 Map。
    new Map([
      [true, 7],
      [{foo: 3}, ['abc']]
    ])
  6）map 转化为对象
    function strMapToObj(strMap) {
      let obj = Object.create(null);
      for (let [k,v] of strMap) {
        obj[k] = v;
      }
      return obj;
    }

    const myMap = new Map()
      .set('yes', true)
      .set('no', false);
    strMapToObj(myMap)
    // { yes: true, no: false }