1、字符串扩展
  1）字符串遍历
    for (let codePoint of 'foo') {
      console.log(codePoint)
    }
    // "f"
    // "o"
    // "o"
  2）at() 返回字符串给定位置的字符
    'abc'.at(0) // "a"
    '𠮷'.at(0) // "𠮷"
  3）includes() 是否包含该参数字符串
    let s = 'Hello world!';
    s.includes('o') // true
    s.includes('Hello', 6) // false
  4）startsWith() 是否在原字符串的头部
    let s = 'Hello world!';
    s.startsWith('Hello') // true
    s.startsWith('world', 6) // true
  5）endsWith() 是否在原字符串的尾部
    let s = 'Hello world!';
    s.includes('o') // true
    s.endsWith('Hello', 5) // true
  6）repeat() 将原字符串重复n次,并返回
    'hello'.repeat(2) // "hellohello"
    'na'.repeat(-1) // RangeError
    'na'.repeat(2.9) // "nana"
  7）padStart() 头部补全指定长度字符串
    'x'.padStart(4, 'ab') // 'abax'
    'xxx'.padStart(2, 'ab') // 'xxx'
    用于提示字符串格式
    '09-12'.padStart(10, 'YYYY-MM-DD') // "YYYY-09-12"
  8）padEnd() 尾部补全指定长度字符串
    'x'.padEnd(4, 'ab') // 'xaba'
    'xxx'.padEnd(2, 'ab') // 'xxx'
  9）matchAll() 返回一个正则表达式在当前字符串的所有匹配
  10) String.raw() 处理模版字符串的基本方法，会将所欲变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用
    String.raw`Hi\n${2+3}!`;
    // 返回 "Hi\\n5!"
    String.raw`Hi\u000A!`;
    // 返回 "Hi\\u000A!"
    String.raw({ raw: 'test' }, 0, 1, 2);
    // 返回 't0e1s2t'